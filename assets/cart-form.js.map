{"mappings":"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","sources":["<anon>","src/js/cart-form.js"],"sourcesContent":["(function () {\nShopify.theme = Shopify.theme || {};\nShopify.theme.cart = Shopify.theme.cart || {};\nShopify.theme.cart.sections = Shopify.theme.cart.sections || [];\nclass $65ad11e226c1b6ac$var$CartForm extends HTMLElement {\n    constructor(){\n        super();\n    }\n    connectedCallback() {\n        const quantities = this.querySelectorAll(`[name=\"updates[]\"]`);\n        const removeButtons = this.querySelectorAll(`[name=\"line-item-remove\"]`);\n        Shopify.theme.cart.sections.push(this.section);\n        quantities.forEach((qty)=>{\n            qty.addEventListener(\"change\", async (e)=>{\n                this.loading = true;\n                const res = await Shopify.theme.cart.update({\n                    updates: {\n                        [qty.dataset.lineItemKey]: Number(qty.value)\n                    }\n                }, {\n                    events: true\n                });\n                this.updateView(res.sections[this.section]);\n            });\n        });\n        removeButtons.forEach((rm)=>{\n            rm.addEventListener(\"click\", (e)=>{\n                e.preventDefault();\n                this.removeByUrl(rm.href);\n            });\n        });\n        window.addEventListener(\"cart:add\", (e)=>{\n            this.updateView(e.detail?.sections[this.section]);\n            this.querySelectorAll(\"[data-cart-success]\").forEach((element)=>{\n                element.show();\n                setTimeout(()=>{\n                    element.hide();\n                }, 10000);\n            });\n        });\n    }\n    get section() {\n        return this.getAttribute(\"section\") || \"cart-main\";\n    }\n    removeByUrl(href) {\n        this.loading = true;\n        const url = new URL(href);\n        url.searchParams.append(\"sections\", this.section);\n        fetch(`${url}`, {\n            headers: {\n                Accept: \"application/json\"\n            }\n        }).then((res)=>res.json()).then((res)=>{\n            this.updateView(res.sections[this.section]);\n            this.loading = false;\n        }).catch((err)=>{\n            console.error(err);\n            this.loading = false;\n        });\n    }\n    updateView(htmlString) {\n        this.loading = true;\n        const div = document.createElement(\"div\");\n        div.innerHTML = htmlString.trim();\n        const newForm = div.querySelector(\"cart-form\");\n        this.replaceWith(newForm);\n        window.dispatchEvent(new CustomEvent(\"cart:updated\"));\n        this.loading = false;\n    }\n    set loading(v) {\n        if (v) this.setAttribute(\"loading\", v);\n        else this.removeAttribute(\"loading\");\n    }\n    get loading() {\n        return this.hasAttribute(\"loading\");\n    }\n    static get observedAttributes() {\n        return [];\n    }\n    attributeChangedCallback(property, oldValue, newValue) {\n        if (oldValue === newValue) return;\n        this[property] = newValue;\n    }\n}\ncustomElements.define(\"cart-form\", $65ad11e226c1b6ac$var$CartForm);\n\n})();\n//# sourceMappingURL=cart-form.js.map\n","    \nShopify.theme = Shopify.theme || {};\nShopify.theme.cart = Shopify.theme.cart || {};\nShopify.theme.cart.sections = Shopify.theme.cart.sections || []\nclass CartForm extends HTMLElement {\n  constructor() {\n    super();\n  }\n  connectedCallback() {\n    const quantities = this.querySelectorAll(`[name=\"updates[]\"]`);\n    const removeButtons = this.querySelectorAll(`[name=\"line-item-remove\"]`);\n    \n    Shopify.theme.cart.sections.push(this.section)\n\n    quantities.forEach((qty) => {\n      qty.addEventListener(\"change\", async (e) => {\n        this.loading = true;\n        const res = await Shopify.theme.cart.update({ updates: { [qty.dataset.lineItemKey]: Number(qty.value) } }, {\n          events: true\n        });\n        this.updateView(res.sections[this.section]);\n      });\n    });\n\n    removeButtons.forEach((rm) => {\n      rm.addEventListener(\"click\", (e) => {\n        e.preventDefault();\n        this.removeByUrl(rm.href);\n      });\n    });\n    window.addEventListener(\"cart:add\", (e) => {\n      this.updateView(e.detail?.sections[this.section]);\n      this.querySelectorAll('[data-cart-success]').forEach((element) => {\n        element.show()\n        setTimeout(() => {\n          element.hide()\n        }, 10000)\n      })\n    });\n  }\n\n  get section() {\n    return this.getAttribute(\"section\") || \"cart-main\";\n  }\n\n  removeByUrl(href) {\n    this.loading = true;\n    const url = new URL(href);\n    url.searchParams.append(\"sections\", this.section);\n    fetch(`${url}`, {\n      headers: {\n        Accept: \"application/json\",\n      },\n    })\n    .then((res) => res.json())\n    .then((res) => {\n      this.updateView(res.sections[this.section]);\n      this.loading = false;\n    })\n    .catch((err) => {\n      console.error(err);\n      this.loading = false;\n    });\n  }\n\n  updateView(htmlString) {\n    this.loading = true;\n    const div = document.createElement(\"div\");\n    div.innerHTML = htmlString.trim();\n    const newForm = div.querySelector(\"cart-form\");\n    this.replaceWith(newForm);\n    window.dispatchEvent(new CustomEvent(\"cart:updated\"));\n    this.loading = false;\n  }\n\n  set loading(v) {\n    if (v) {\n      this.setAttribute(\"loading\", v);\n    } else {\n      this.removeAttribute(\"loading\");\n    }\n  }\n  get loading() {\n    return this.hasAttribute(\"loading\");\n  }\n\n  static get observedAttributes() {\n    return [];\n  }\n  attributeChangedCallback(property, oldValue, newValue) {\n    if (oldValue === newValue) return;\n    this[property] = newValue;\n  }\n}\n\ncustomElements.define(\"cart-form\", CartForm);"],"names":["Shopify","theme","cart","sections","$65ad11e226c1b6ac$var$CartForm","HTMLElement","constructor","connectedCallback","quantities","querySelectorAll","removeButtons","push","section","forEach","qty","addEventListener","e","loading","res","update","updates","dataset","lineItemKey","Number","value","events","updateView","rm","preventDefault","removeByUrl","href","window","detail","element","show","setTimeout","hide","getAttribute","url","URL","searchParams","append","fetch","headers","Accept","then","json","catch","err","console","error","htmlString","div","document","createElement","innerHTML","trim","newForm","querySelector","replaceWith","dispatchEvent","CustomEvent","v","setAttribute","removeAttribute","hasAttribute","observedAttributes","attributeChangedCallback","property","oldValue","newValue","customElements","define"],"version":3,"file":"cart-form.js.map"}