!function(){Shopify.theme=Shopify.theme||{},Shopify.theme.cart=Shopify.theme.cart||{},Shopify.theme.cart.mode=Shopify.theme.cart.mode||"page",Shopify.theme.cart.onAdd=Shopify.theme.cart.onAdd||"redirect",Shopify.theme.cart.sections=Shopify.theme.cart.sections||[];let e={events:!0,sections:[],callback:e=>{}},t="cart:add",o="cart:changed";Shopify.theme.cart={...Shopify.theme.cart,init:function(){if(window.addEventListener(t,e=>{switch(e.preventDefault(),this.onAdd){case"drawer":window.dispatchEvent(new CustomEvent("modal:open",{detail:{id:"cart-drawer"}}));break;case"notification":window.dispatchEvent(new CustomEvent("modal:open",{detail:{id:"cart-notification"}}));break;case"modal":window.dispatchEvent(new CustomEvent("modal:open",{detail:{id:"cart-modal"}}));break;default:window.location.href=window.Shopify.routes.cartUrl}}),"drawer"==this.mode){console.log("Cart mode: Drawer"),document.addEventListener("click",e=>{let t=e.target.closest("a");t&&t.getAttribute("href")==window.Shopify.routes.cartUrl&&(e.preventDefault(),window.dispatchEvent(new CustomEvent("modal:open",{detail:{id:"cart-drawer"}})))});let e=new URL(location);"open"==e.searchParams.get("cart")&&(window.dispatchEvent(new CustomEvent("modal:open",{detail:{id:"cart-drawer"}})),e.searchParams.delete("cart"),history.replaceState({},"",e.href))}else console.log("Cart mode: Page")},get:async(t=e)=>{let o=window.Shopify.routes.cartUrl+"?sections="+[...Shopify.theme.cart.sections,...t?.sections??[]].uniq().join(",");return await fetch(o,{headers:{"Content-Type":"application/json",Accept:"application/json"},method:"GET"}).then(e=>e.json()).catch(console.error)},add:async(o,n=e)=>{let a=window.Shopify.routes.cartAddUrl+"?sections="+[...Shopify.theme.cart.sections,...n?.sections??[]].uniq().join(",");return await fetch(a,{body:JSON.stringify(o),headers:{"Content-Type":"application/json",Accept:"application/json"},method:"POST"}).then(e=>e.json()).then(e=>{if(e.status)throw Error(`${e.message}: ${e.description}`);return n.callback&&n.callback(e),n.events,window.dispatchEvent(new CustomEvent(t,{detail:{...e,added_count:o.reduce((e,t)=>e+Number(t.quantity),0)}})),e}).catch(console.error)},update:async(t,n=e)=>{let a=window.Shopify.routes.cartUpdateUrl+"?sections="+[...Shopify.theme.cart.sections,...n?.sections??[]].uniq().join(",");return await fetch(a,{body:JSON.stringify(t),headers:{"Content-Type":"application/json",Accept:"application/json"},method:"POST"}).then(e=>e.json()).then(e=>{if(e.status)throw Error(`${e.message}: ${e.description}`);return n.callback&&n.callback(e),n.events,window.dispatchEvent(new CustomEvent(o,{detail:{...e}})),e}).catch(console.error)},clear:async(t=e)=>{let n=window.Shopify.routes.cartClearUrl+"?sections="+[...Shopify.theme.cart.sections,...t?.sections??[]].uniq().join(",");return await fetch(n,{body:"",headers:{"Content-Type":"application/json",Accept:"application/json"},method:"POST"}).then(e=>e.json()).then(e=>{if(e.status)throw Error(`${e.message}: ${e.description}`);return t.callback&&t.callback(e),t.events,window.dispatchEvent(new CustomEvent(o,{detail:{...e}})),e}).catch(console.error)},prepareShippingRates:async e=>{let t=`${window.Shopify.routes.cartUrl}/cart/prepare_shipping_rates.json?shipping_address[zip]=${e.zip}&shipping_address[country]=${e.country}&shipping_address[province]=${e.province}`;await fetch(t,{method:"post"});let o=`/{locale}/cart/async_shipping_rates.json?shipping_address[zip]=${e.zip}&shipping_address[country]=${e.country}&shipping_address[province]=${e.province}`;return await fetch(o,{method:"get"}).then(e=>e.json())}},Shopify.theme.cart.init()}();
//# sourceMappingURL=cart.js.map
