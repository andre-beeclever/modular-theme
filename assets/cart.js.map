{"mappings":"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","sources":["<anon>","src/js/cart.js"],"sourcesContent":["(function () {\nShopify.theme = Shopify.theme || {};\nShopify.theme.cart = Shopify.theme.cart || {};\nShopify.theme.cart.mode = Shopify.theme.cart.mode || \"page\";\nShopify.theme.cart.onAdd = Shopify.theme.cart.onAdd || \"redirect\";\nShopify.theme.cart.sections = Shopify.theme.cart.sections || [];\nconst $ce375e1befa17f1c$var$DEFAULT_OPTIONS = {\n    events: true,\n    sections: [],\n    callback: (cart)=>{}\n};\nconst $ce375e1befa17f1c$var$ADD_EVENT_NAME = \"cart:add\";\nconst $ce375e1befa17f1c$var$CHANGE_EVENT_NAME = \"cart:changed\";\nShopify.theme.cart = {\n    ...Shopify.theme.cart,\n    init: function() {\n        window.addEventListener($ce375e1befa17f1c$var$ADD_EVENT_NAME, (e)=>{\n            e.preventDefault();\n            switch(this.onAdd){\n                case \"drawer\":\n                    window.dispatchEvent(new CustomEvent(\"modal:open\", {\n                        detail: {\n                            id: \"cart-drawer\"\n                        }\n                    }));\n                    break;\n                case \"notification\":\n                    window.dispatchEvent(new CustomEvent(\"modal:open\", {\n                        detail: {\n                            id: \"cart-notification\"\n                        }\n                    }));\n                    break;\n                case \"modal\":\n                    window.dispatchEvent(new CustomEvent(\"modal:open\", {\n                        detail: {\n                            id: \"cart-modal\"\n                        }\n                    }));\n                    break;\n                case \"redirect\":\n                default:\n                    window.location.href = window.Shopify.routes.cartUrl;\n                    break;\n            }\n        });\n        if (this.mode == \"drawer\") {\n            console.log(\"Cart mode: Drawer\");\n            document.addEventListener(\"click\", (e)=>{\n                const target = e.target.closest(\"a\");\n                if (target) // console.log(\"Link clicked: \", target)  \n                {\n                    if (target.getAttribute(\"href\") == window.Shopify.routes.cartUrl) {\n                        e.preventDefault();\n                        window.dispatchEvent(new CustomEvent(\"modal:open\", {\n                            detail: {\n                                id: \"cart-drawer\"\n                            }\n                        }));\n                    }\n                }\n            });\n            const url = new URL(location);\n            const shouldOpen = url.searchParams.get(\"cart\") == \"open\";\n            if (shouldOpen) {\n                window.dispatchEvent(new CustomEvent(\"modal:open\", {\n                    detail: {\n                        id: \"cart-drawer\"\n                    }\n                }));\n                url.searchParams.delete(\"cart\");\n                history.replaceState({}, \"\", url.href);\n            }\n        } else console.log(\"Cart mode: Page\");\n    },\n    get: async (options = $ce375e1befa17f1c$var$DEFAULT_OPTIONS)=>{\n        const url = window.Shopify.routes.cartUrl + \"?sections=\" + [\n            ...Shopify.theme.cart.sections,\n            ...options?.sections ?? []\n        ].uniq().join(\",\");\n        return await fetch(url, {\n            headers: {\n                \"Content-Type\": \"application/json\",\n                \"Accept\": \"application/json\"\n            },\n            method: \"GET\"\n        }).then((response)=>response.json()).catch(console.error);\n    },\n    add: async (itemsToAdd, options = $ce375e1befa17f1c$var$DEFAULT_OPTIONS)=>{\n        const url = window.Shopify.routes.cartAddUrl + \"?sections=\" + [\n            ...Shopify.theme.cart.sections,\n            ...options?.sections ?? []\n        ].uniq().join(\",\");\n        return await fetch(url, {\n            body: JSON.stringify(itemsToAdd),\n            headers: {\n                \"Content-Type\": \"application/json\",\n                \"Accept\": \"application/json\"\n            },\n            method: \"POST\"\n        }).then((response)=>response.json()).then((response)=>{\n            if (response.status) throw new Error(`${response.message}: ${response.description}`);\n            if (!!options.callback) options.callback(response);\n            options.events;\n            window.dispatchEvent(new CustomEvent($ce375e1befa17f1c$var$ADD_EVENT_NAME, {\n                detail: {\n                    ...response,\n                    added_count: itemsToAdd.reduce((acc, i)=>acc + Number(i.quantity), 0)\n                }\n            }));\n            return response;\n        }).catch(console.error);\n    },\n    update: async (itemsToUpdate, options = $ce375e1befa17f1c$var$DEFAULT_OPTIONS)=>{\n        const url = window.Shopify.routes.cartUpdateUrl + \"?sections=\" + [\n            ...Shopify.theme.cart.sections,\n            ...options?.sections ?? []\n        ].uniq().join(\",\");\n        return await fetch(url, {\n            body: JSON.stringify(itemsToUpdate),\n            headers: {\n                \"Content-Type\": \"application/json\",\n                \"Accept\": \"application/json\"\n            },\n            method: \"POST\"\n        }).then((response)=>response.json()).then((response)=>{\n            if (response.status) throw new Error(`${response.message}: ${response.description}`);\n            if (!!options.callback) options.callback(response);\n            options.events;\n            window.dispatchEvent(new CustomEvent($ce375e1befa17f1c$var$CHANGE_EVENT_NAME, {\n                detail: {\n                    ...response\n                }\n            }));\n            return response;\n        }).catch(console.error);\n    },\n    clear: async (options = $ce375e1befa17f1c$var$DEFAULT_OPTIONS)=>{\n        const url = window.Shopify.routes.cartClearUrl + \"?sections=\" + [\n            ...Shopify.theme.cart.sections,\n            ...options?.sections ?? []\n        ].uniq().join(\",\");\n        return await fetch(url, {\n            body: \"\",\n            headers: {\n                \"Content-Type\": \"application/json\",\n                \"Accept\": \"application/json\"\n            },\n            method: \"POST\"\n        }).then((response)=>response.json()).then((response)=>{\n            if (response.status) throw new Error(`${response.message}: ${response.description}`);\n            if (!!options.callback) options.callback(response);\n            options.events;\n            window.dispatchEvent(new CustomEvent($ce375e1befa17f1c$var$CHANGE_EVENT_NAME, {\n                detail: {\n                    ...response\n                }\n            }));\n            return response;\n        }).catch(console.error);\n    },\n    getShippingRates: async (address)=>{\n        const prepareUrl = new URL(`${window.Shopify.routes.cartUrl}/prepare_shipping_rates.json`);\n        Object.entries(address).forEach(([key, value])=>prepareUrl.searchParams.set(`shipping_address[${key}]`, value));\n        await fetch(prepareUrl, {\n            method: \"post\"\n        });\n        const getUrl = new URL(`${window.Shopify.routes.cartUrl}/async_shipping_rates.json`);\n        Object.entries(address).forEach(([key, value])=>getUrl.searchParams.set(`shipping_address[${key}]`, value));\n        return await fetch(getUrl, {\n            method: \"get\"\n        }).then((response)=>response.json());\n    }\n};\nShopify.theme.cart.init();\n\n})();\n//# sourceMappingURL=cart.js.map\n","Shopify.theme = Shopify.theme || {};\nShopify.theme.cart = Shopify.theme.cart || {};\nShopify.theme.cart.mode = Shopify.theme.cart.mode || \"page\"; \nShopify.theme.cart.onAdd = Shopify.theme.cart.onAdd || \"redirect\"; \nShopify.theme.cart.sections = Shopify.theme.cart.sections || []\n\nconst DEFAULT_OPTIONS = {\n  events: true, \n  sections: [],\n  callback: (cart) => {}\n}\n\nconst ADD_EVENT_NAME = \"cart:add\"\nconst CHANGE_EVENT_NAME = \"cart:changed\"\n\nShopify.theme.cart = {\n  ...Shopify.theme.cart,\n  init: function () {\n    window.addEventListener(ADD_EVENT_NAME, (e) => {\n      e.preventDefault()\n      switch (this.onAdd) {\n        case \"drawer\":\n          window.dispatchEvent(new CustomEvent(\"modal:open\", { detail: { id: 'cart-drawer'}}))\n          break;\n        case \"notification\":\n          window.dispatchEvent(new CustomEvent(\"modal:open\", { detail: { id: 'cart-notification'}}))\n          break;\n        case \"modal\":\n          window.dispatchEvent(new CustomEvent(\"modal:open\", { detail: { id: 'cart-modal'}}))\n          break;\n        case \"redirect\":\n        default:\n          window.location.href = window.Shopify.routes.cartUrl\n          break;\n      }\n    })\n    if(this.mode == \"drawer\"){\n      console.log(\"Cart mode: Drawer\")\n      document.addEventListener('click', (e) => {    \n        const target = e.target.closest('a');  \n        if (target) {\n          // console.log(\"Link clicked: \", target)  \n          if (target.getAttribute(\"href\") == window.Shopify.routes.cartUrl) {\n              e.preventDefault(); \n              window.dispatchEvent(new CustomEvent(\"modal:open\", { detail: { id: 'cart-drawer'}}))\n          }\n        }\n      });\n      const url = new URL(location)\n      const shouldOpen = url.searchParams.get('cart') == \"open\"\n      if(shouldOpen){\n        window.dispatchEvent(new CustomEvent(\"modal:open\", { detail: { id: 'cart-drawer'}}))\n        url.searchParams.delete('cart')\n        history.replaceState({}, \"\", url.href)\n      }\n\n    }\n    else{\n      console.log(\"Cart mode: Page\")\n    }\n  },\n  get: async (options = DEFAULT_OPTIONS) => {\n    const url = window.Shopify.routes.cartUrl + \"?sections=\" + [...Shopify.theme.cart.sections, ...(options?.sections ?? [])].uniq().join(\",\");\n    return await fetch(url, {\n      headers: { \n        \"Content-Type\": \"application/json\", \n        \"Accept\": \"application/json\"\n      },\n      method: \"GET\",\n    })\n    .then((response) => response.json())\n    .catch(console.error);\n  },\n  add: async (itemsToAdd, options = DEFAULT_OPTIONS) => {\n    const url = window.Shopify.routes.cartAddUrl + \"?sections=\" + ([...Shopify.theme.cart.sections, ...(options?.sections ?? [])].uniq()).join(\",\");\n    return await fetch(url, {\n      body: JSON.stringify(itemsToAdd),\n      headers: { \n        \"Content-Type\": \"application/json\", \n        \"Accept\": \"application/json\"\n      },\n      method: \"POST\",\n    })\n    .then((response) => response.json())\n    .then((response) => {\n      if(response.status){\n        throw new Error(`${response.message}: ${response.description}`)\n      }\n      if(!!options.callback){\n        options.callback(response);\n      }\n      if (options.events || true) {\n        window.dispatchEvent(new CustomEvent(ADD_EVENT_NAME, { detail: { ...response, added_count: itemsToAdd.reduce((acc, i) => acc + Number(i.quantity), 0) } }));\n        return response\n      }\n    })\n    .catch(console.error);\n  },\n  update: async (itemsToUpdate, options = DEFAULT_OPTIONS) => {\n    const url = window.Shopify.routes.cartUpdateUrl + \"?sections=\" + [...Shopify.theme.cart.sections, ...(options?.sections ?? [])].uniq().join(\",\");\n    return await fetch(url, {\n      body: JSON.stringify(itemsToUpdate),\n      headers: { \n        \"Content-Type\": \"application/json\", \n        \"Accept\": \"application/json\"\n      },\n      method: \"POST\",\n    })\n    .then((response) => response.json())\n    .then((response) => {\n      if(response.status){\n        throw new Error(`${response.message}: ${response.description}`)\n      }\n      if(!!options.callback){\n        options.callback(response);\n      }\n      if (options.events || true) {\n        window.dispatchEvent(new CustomEvent(CHANGE_EVENT_NAME, { detail: { ...response } }));\n        return response\n      }\n    })\n    .catch(console.error);\n  },\n  clear: async (options = DEFAULT_OPTIONS) => {\n    const url = window.Shopify.routes.cartClearUrl + \"?sections=\" + [...Shopify.theme.cart.sections, ...(options?.sections ?? [])].uniq().join(\",\");\n    return await fetch(url, {\n      body: \"\",\n      headers: { \n        \"Content-Type\": \"application/json\", \n        \"Accept\": \"application/json\"\n      },\n      method: \"POST\",\n    })\n    .then((response) => response.json())\n    .then((response) => {\n      if(response.status){\n        throw new Error(`${response.message}: ${response.description}`)\n      }\n      if(!!options.callback){\n        options.callback(response);\n      }\n      if (options.events || true) {\n        window.dispatchEvent(new CustomEvent(CHANGE_EVENT_NAME, { detail: { ...response } }));\n        return response\n      }\n    })\n    .catch(console.error);\n  },\n  getShippingRates: async (address) => {\n    const prepareUrl = new URL(`${window.Shopify.routes.cartUrl}/prepare_shipping_rates.json`) \n    Object.entries(address).forEach(([key, value]) => prepareUrl.searchParams.set(`shipping_address[${key}]`, value))\n    await fetch(prepareUrl, {\n      method: \"post\",\n    })\n\n    const getUrl = new URL(`${window.Shopify.routes.cartUrl}/async_shipping_rates.json`) \n    Object.entries(address).forEach(([key, value]) => getUrl.searchParams.set(`shipping_address[${key}]`, value))\n    return await fetch(getUrl, {\n      method: \"get\",\n    })\n    .then((response) => response.json())\n  }\n};\n\nShopify.theme.cart.init();\n"],"names":["Shopify","theme","cart","mode","onAdd","sections","$ce375e1befa17f1c$var$DEFAULT_OPTIONS","events","callback","$ce375e1befa17f1c$var$ADD_EVENT_NAME","$ce375e1befa17f1c$var$CHANGE_EVENT_NAME","init","window","addEventListener","e","preventDefault","dispatchEvent","CustomEvent","detail","id","location","href","routes","cartUrl","console","log","document","target","closest","getAttribute","url","URL","searchParams","get","delete","history","replaceState","options","uniq","join","fetch","headers","method","then","response","json","catch","error","add","itemsToAdd","cartAddUrl","body","JSON","stringify","status","Error","message","description","added_count","reduce","acc","i","Number","quantity","update","itemsToUpdate","cartUpdateUrl","clear","cartClearUrl","getShippingRates","address","prepareUrl","Object","entries","forEach","key","value","set","getUrl"],"version":3,"file":"cart.js.map"}