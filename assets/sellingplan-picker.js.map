{"mappings":"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","sources":["<anon>","src/js/sellingplan-picker.js"],"sourcesContent":["(function () {\nclass $207dea24ae43afab$var$SellingPlanPicker extends HTMLElement {\n    constructor(){\n        super();\n    }\n    connectedCallback() {\n        const purchseOptions = this.querySelectorAll('[name=\"purchase-option\"]');\n        const sellingPlanSelects = this.querySelectorAll(\"theme-select.selling-plan-select\");\n        for (const purchseOption of purchseOptions)purchseOption.addEventListener(\"input\", (event)=>{\n            if (purchseOption.value == \"subscription\") {\n                const label = this.querySelector(`label[for=\"${purchseOption.id}\"]`);\n                const sellingPlan = label.querySelector('[name=\"current-selling-plan\"]');\n                if (!!sellingPlan) this.setSellingPlan(sellingPlan.value);\n            }\n            if (purchseOption.value == \"onetime\") this.removeSellingPlan();\n        });\n        for (const sellingPlanSelect of sellingPlanSelects)sellingPlanSelect.addEventListener(\"change\", (event)=>{\n            const sellingPlan = sellingPlanSelect.value;\n            if (!!sellingPlan) this.setSellingPlan(sellingPlan);\n        });\n    }\n    updateDOM(newURL, sellingPlanId) {\n        const that = this;\n        const sectionId = that.dataset.sectionId;\n        that.classList.remove(\"loading\");\n        fetch(newURL, {\n            credentials: \"same-origin\",\n            headers: {\n                \"X-Requested-With\": \"XMLHttpRequest\"\n            },\n            method: \"GET\"\n        }).then((response)=>response.text()).then((data)=>{\n            const template = document.createElement(\"template\");\n            template.innerHTML = data.trim();\n            console.log(\"handle response TODO\", template.content);\n            // TODO\n            // handle response and update\n            window.dispatchEvent(new CustomEvent(\"sellingplan:changed\", {\n                bubbles: true,\n                cancelable: false,\n                detail: sellingPlanId\n            }));\n            that.classList.remove(\"loading\");\n        }).catch(function(err) {\n            that.classList.remove(\"loading\");\n            console.error(err);\n        });\n    }\n    updateURL(variantId, sellingPlanId) {\n        const newURL = new URL(document.location);\n        if (!!variantId) newURL.searchParams.set(\"variant\", variantId);\n        else newURL.searchParams.delete(\"variant\");\n        if (!!sellingPlanId) newURL.searchParams.set(\"selling_plan\", sellingPlanId);\n        else newURL.searchParams.delete(\"selling_plan\");\n        history.replaceState(null, \"\", newURL.href);\n    }\n    setSellingPlan(sellingPlanId) {\n        const form = this.closest(\"form.shopify-product-form\");\n        const current_variant_input = form.querySelector('input[name=\"id\"]');\n        const variantId = current_variant_input.value;\n        this.updateURL(variantId, sellingPlanId);\n        const sectionId = this.dataset.sectionId;\n        const productUrl = this.dataset.productUrl;\n        const newURL = `${productUrl}?variant=${variantId}&selling_plan=${sellingPlanId}&section_id=${sectionId}`;\n        this.updateDOM(newURL, sellingPlanId);\n    }\n    removeSellingPlan() {\n        const form = this.closest(\"form.shopify-product-form\");\n        const current_variant_input = form.querySelector('input[name=\"id\"]');\n        const variantId = current_variant_input.value;\n        this.updateURL(variantId, null);\n        let sectionId = this.dataset.sectionId;\n        if (!sectionId) sectionId = this.closest(\"form\")?.querySelector('input[name=\"section-id\"]')?.value;\n        const productUrl = this.dataset.productUrl;\n        const newURL = `${productUrl}?variant=${variantId}&section_id=${sectionId}`;\n        this.updateDOM(newURL, null);\n    }\n}\ncustomElements.define(\"selling-plan-picker\", $207dea24ae43afab$var$SellingPlanPicker);\n\n})();\n//# sourceMappingURL=sellingplan-picker.js.map\n","class SellingPlanPicker extends HTMLElement {\n  constructor() {\n    super();\n  }\n  connectedCallback(){\n    const purchseOptions = this.querySelectorAll('[name=\"purchase-option\"]');\n    const sellingPlanSelects = this.querySelectorAll('theme-select.selling-plan-select');\n    for(const purchseOption of purchseOptions) {\n      purchseOption.addEventListener('input', event => {\n        if(purchseOption.value == 'subscription') {\n          const label = this.querySelector(`label[for=\"${purchseOption.id}\"]`);\n          const sellingPlan = label.querySelector('[name=\"current-selling-plan\"]');\n          if(!!sellingPlan){\n            this.setSellingPlan(sellingPlan.value);\n          }\n        }\n        if(purchseOption.value == 'onetime') {\n          this.removeSellingPlan();\n        }\n      });\n    }\n    for(const sellingPlanSelect of sellingPlanSelects) {\n      sellingPlanSelect.addEventListener('change', event => {\n        const sellingPlan = sellingPlanSelect.value;\n        if(!!sellingPlan){\n          this.setSellingPlan(sellingPlan);\n        }\n      });\n    }\n  }\n  updateDOM(newURL, sellingPlanId){\n    const that = this;\n    const sectionId = that.dataset.sectionId;\n    that.classList.remove('loading');\n    fetch(newURL, {\n      credentials: 'same-origin',\n      headers: {'X-Requested-With': 'XMLHttpRequest'},\n      method: 'GET'\n    })\n    .then(response => response.text())\n    .then(data => {\n      const template = document.createElement('template');\n      template.innerHTML = data.trim();\n      console.log('handle response TODO', template.content);\n      // TODO\n      // handle response and update\n      window.dispatchEvent(new CustomEvent('sellingplan:changed', {bubbles: true, cancelable: false, detail: sellingPlanId}));\n      that.classList.remove('loading');\n    })\n    .catch(function(err) {\n      that.classList.remove('loading');\n      console.error(err);\n    });\n  }\n  updateURL(variantId, sellingPlanId){\n    const newURL = new URL(document.location);\n    if(!!variantId){\n      newURL.searchParams.set('variant', variantId);\n    } else {\n      newURL.searchParams.delete('variant');\n    }\n    if(!!sellingPlanId){\n      newURL.searchParams.set('selling_plan', sellingPlanId);\n    } else {\n      newURL.searchParams.delete('selling_plan');\n    }\n    history.replaceState(null, '', newURL.href);\n  }\n  setSellingPlan(sellingPlanId) {\n    const form = this.closest('form.shopify-product-form');\n    const current_variant_input = form.querySelector('input[name=\"id\"]');\n    const variantId = current_variant_input.value;\n    this.updateURL(variantId, sellingPlanId);\n\n    const sectionId = this.dataset.sectionId;\n    const productUrl = this.dataset.productUrl;\n    const newURL = `${productUrl}?variant=${variantId}&selling_plan=${sellingPlanId}&section_id=${sectionId}`;\n    this.updateDOM(newURL, sellingPlanId);\n  }\n  removeSellingPlan() {\n    const form = this.closest('form.shopify-product-form');\n    const current_variant_input = form.querySelector('input[name=\"id\"]');\n    const variantId = current_variant_input.value;\n    this.updateURL(variantId, null);\n\n    let sectionId = this.dataset.sectionId;\n    if(!sectionId) {\n      sectionId = this.closest('form')?.querySelector('input[name=\"section-id\"]')?.value;\n    }\n    const productUrl = this.dataset.productUrl;\n    const newURL = `${productUrl}?variant=${variantId}&section_id=${sectionId}`;\n    this.updateDOM(newURL, null);\n  }\n}\ncustomElements.define('selling-plan-picker', SellingPlanPicker);"],"names":["$207dea24ae43afab$var$SellingPlanPicker","HTMLElement","constructor","connectedCallback","purchseOptions","querySelectorAll","sellingPlanSelects","purchseOption","addEventListener","event","value","sellingPlan","label","querySelector","id","setSellingPlan","removeSellingPlan","sellingPlanSelect","updateDOM","newURL","sellingPlanId","that","dataset","sectionId","classList","remove","fetch","credentials","headers","method","then","response","text","data","template","document","createElement","innerHTML","trim","console","log","content","window","dispatchEvent","CustomEvent","bubbles","cancelable","detail","catch","err","error","updateURL","variantId","URL","location","searchParams","set","delete","history","replaceState","href","current_variant_input","form","closest","productUrl","customElements","define"],"version":3,"file":"sellingplan-picker.js.map"}