{"mappings":"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","sources":["<anon>","src/js/theme-modal.ts"],"sourcesContent":["(function () {\nwindow.theme = window.theme || {};\nwindow.theme.scroll = window.theme.scroll || function() {\n    let lastScrollPosition = 0;\n    let scrollEnabled = true;\n    const getScrollbarWidth = ()=>{\n        let scrollDiv = document.createElement(\"div\");\n        scrollDiv.className = \"scrollbar-measure\";\n        document.body.appendChild(scrollDiv);\n        // Get the scrollbar width\n        const scrollbarWidth = scrollDiv.offsetWidth - scrollDiv.clientWidth;\n        // Delete the div\n        document.body.removeChild(scrollDiv);\n        return scrollbarWidth;\n    };\n    return {\n        isEnabled () {\n            return scrollEnabled;\n        },\n        disable: ()=>{\n            scrollEnabled = false;\n            lastScrollPosition = window.scrollY;\n            document.body.style.top = -window.scrollY + \"px\";\n            if (window.innerWidth > 576) document.body.style.paddingRight = `${getScrollbarWidth()}px`;\n            document.body.style.position = \"fixed\";\n        },\n        enable: ()=>{\n            scrollEnabled = true;\n            document.body.style.position = \"\";\n            document.body.style.top = \"\";\n            document.body.style.paddingRight = \"\";\n            window.scrollTo({\n                top: lastScrollPosition,\n                behavior: \"instant\"\n            });\n        }\n    };\n}();\nclass $ae05fdce05933ef6$var$ThemeModalButton extends HTMLElement {\n    static #_ = this.TAGS = [\n        \"theme-modal\",\n        \"theme-alert\",\n        \"theme-notification\",\n        \"theme-drawer\"\n    ];\n    static #_2 = this.TAG_NAMES = $ae05fdce05933ef6$var$ThemeModalButton.TAGS.map((tag)=>tag.toUpperCase());\n    constructor(){\n        super();\n    }\n    connectedCallback() {\n        this.addEventListener(\"click\", (e)=>{\n            const id = this.getAttribute(\"for\");\n            const target = document.getElementById(id) || this.closest($ae05fdce05933ef6$var$ThemeModalButton.TAGS.join(\",\"));\n            console.log(\"target\", target);\n            if (!target) {\n                console.warn(`[${this.tagName}] Target not found.`);\n                return;\n            }\n            if (!$ae05fdce05933ef6$var$ThemeModalButton.TAG_NAMES.includes(target.tagName)) {\n                console.warn(`[${this.tagName}] Invalid target.`);\n                return;\n            }\n            target.toggle();\n        });\n    }\n    static get observedAttributes() {\n        return [];\n    }\n    attributeChangedCallback(property, oldValue, newValue) {\n        if (oldValue === newValue) return;\n        this[property] = newValue;\n    }\n}\ncustomElements.define(\"theme-modal-button\", $ae05fdce05933ef6$var$ThemeModalButton);\nclass $ae05fdce05933ef6$var$ThemeModal extends HTMLElement {\n    constructor(){\n        super();\n    }\n    connectedCallback() {\n        const hideOnBlur = this.hasAttribute(\"hide-on-blur\");\n        const hideAfter = this.hasAttribute(\"hide-after\");\n        if (hideAfter) {\n            const hideAfterTime = Number(this.getAttribute(\"hide-after\") || 10000);\n            this.addEventListener(\"opened\", ()=>{\n                setTimeout(()=>{\n                    this.close();\n                }, hideAfterTime);\n            });\n        }\n        if (hideOnBlur) document.addEventListener(\"click\", (e)=>{\n            if (!this.contains(e.target)) this.close();\n        });\n        window.addEventListener(\"modal:open\", (e)=>{\n            // console.log(\"modal:open\", e.detail.id, this.id)\n            if (e.detail.id == this.id) this.open();\n        });\n        window.addEventListener(\"modal:close\", (e)=>{\n            // console.log(\"modal:close\", e.detail.id, this.id)\n            if (e.detail.id == this.id) this.close();\n        });\n        window.addEventListener(\"modal:toggle\", (e)=>{\n            // console.log(\"modal:toggle\", e.detail.id, this.id)\n            if (e.detail.id == this.id) this.toggle();\n        });\n    }\n    get isScrollingEnabled() {\n        return this.getAttribute(\"scrolling\") != \"disabled\";\n    }\n    isOpen() {\n        return this.hasAttribute(\"open\");\n    }\n    open() {\n        this.setAttribute(\"open\", true);\n    }\n    close() {\n        this.removeAttribute(\"open\");\n    }\n    toggle() {\n        console.log(\"toggle\");\n        if (this.isOpen()) this.close();\n        else this.open();\n    }\n    static get observedAttributes() {\n        return [\n            \"open\"\n        ];\n    }\n    attributeChangedCallback(property, oldValue, newValue) {\n        if (oldValue === newValue) return;\n        if (property === \"open\") {\n            if (newValue == \"true\") {\n                console.log(\"open\");\n                if (!this.isScrollingEnabled) {\n                    window.theme.scroll.disable();\n                    console.warn(`[${this.tagName}] Disabled scroll.`);\n                }\n                this.dispatchEvent(new CustomEvent(\"opened\"));\n            } else {\n                console.log(\"close\");\n                if (!this.isScrollingEnabled) {\n                    window.theme.scroll.enable();\n                    console.warn(`[${this.tagName}] Enabled scroll.`);\n                }\n                this.dispatchEvent(new CustomEvent(\"closed\"));\n            }\n            return;\n        } // do not sync open as it is used as a function\n        this[property] = newValue;\n    }\n}\ncustomElements.define(\"theme-modal\", $ae05fdce05933ef6$var$ThemeModal);\nclass $ae05fdce05933ef6$var$ThemeAlert extends $ae05fdce05933ef6$var$ThemeModal {\n    constructor(){\n        super();\n    }\n}\ncustomElements.define(\"theme-alert\", $ae05fdce05933ef6$var$ThemeAlert);\nwindow.Shopify.theme.alert = (message, options = {\n    button: {\n        label: \"Close\",\n        class: \"btn btn--primary\"\n    },\n    container: {\n        class: \"flex col gap-small spacing-m\"\n    }\n})=>{\n    return new Promise((resolve)=>{\n        const alertElement = document.createElement(\"theme-alert\");\n        alertElement.setAttribute(\"scrolling\", \"disabled\");\n        alertElement.setAttribute(\"id\", `alert-${crypto.randomUUID()}`);\n        alertElement.innerHTML = `\n      <div class=\"${options.container.class}\">\n        <p>${message}</p>\n        <theme-modal-button class=\"${options.button.class}\">${options.button.label}</theme-modal-button>\n      </div>\n    `;\n        document.body.appendChild(alertElement);\n        alertElement.addEventListener(\"closed\", ()=>{\n            alertElement.remove();\n            resolve();\n        });\n        alertElement.open();\n    });\n};\nclass $ae05fdce05933ef6$var$ThemeDrawer extends $ae05fdce05933ef6$var$ThemeModal {\n    constructor(){\n        super();\n    }\n}\ncustomElements.define(\"theme-drawer\", $ae05fdce05933ef6$var$ThemeDrawer);\nclass $ae05fdce05933ef6$var$ThemeNotification extends $ae05fdce05933ef6$var$ThemeModal {\n    constructor(){\n        super();\n    }\n}\ncustomElements.define(\"theme-notification\", $ae05fdce05933ef6$var$ThemeNotification);\n\n})();\n//# sourceMappingURL=theme-modal.js.map\n","window.theme = window.theme || {};\nwindow.theme.scroll = window.theme.scroll || (function () {\n  let lastScrollPosition = 0;\n  let scrollEnabled = true;\n\n  const getScrollbarWidth = () => {\n    let scrollDiv = document.createElement(\"div\");\n    scrollDiv.className = \"scrollbar-measure\";\n    document.body.appendChild(scrollDiv);\n  \n    // Get the scrollbar width\n    const scrollbarWidth = scrollDiv.offsetWidth - scrollDiv.clientWidth;\n  \n    // Delete the div\n    document.body.removeChild(scrollDiv);\n\n    return scrollbarWidth;\n  }\n\n  return {\n    isEnabled() {\n      return scrollEnabled;\n    },\n    disable: () => {\n      scrollEnabled = false;\n      lastScrollPosition = window.scrollY;\n      document.body.style.top = -window.scrollY + \"px\";\n      if (window.innerWidth > 576) {\n        document.body.style.paddingRight = `${getScrollbarWidth()}px`;\n      }\n      document.body.style.position = \"fixed\";\n    },\n    enable: () => {\n      scrollEnabled = true;\n      document.body.style.position = \"\";\n      document.body.style.top = \"\";\n      document.body.style.paddingRight = \"\";\n      window.scrollTo({\n        top: lastScrollPosition,\n        behavior: \"instant\",\n      });\n    },\n  };\n})();\n\nclass ThemeModalButton extends HTMLElement {\n  static TAGS = ['theme-modal','theme-alert','theme-notification', 'theme-drawer']\n  static TAG_NAMES = ThemeModalButton.TAGS.map(tag => tag.toUpperCase())\n  constructor() {\n    super();\n  }\n  connectedCallback() {\n    this.addEventListener(\"click\", (e) => {\n      const id = this.getAttribute(\"for\")\n      const target = document.getElementById(id) || this.closest(ThemeModalButton.TAGS.join(','))\n      console.log(\"target\",target)\n      if (!target) {\n        console.warn(`[${this.tagName}] Target not found.`);\n        return;\n      }\n      if (!ThemeModalButton.TAG_NAMES.includes(target.tagName)) {\n        console.warn(`[${this.tagName}] Invalid target.`);\n        return;\n      }\n\n      target.toggle();\n    });\n  }\n\n  static get observedAttributes() {\n    return [];\n  }\n  attributeChangedCallback(property, oldValue, newValue) {\n    if (oldValue === newValue) return;\n    this[property] = newValue;\n  }\n}\n\ncustomElements.define(\"theme-modal-button\", ThemeModalButton);\n\n\nclass ThemeModal extends HTMLElement {\n  constructor() {\n    super();\n  }\n  connectedCallback() {\n    const hideOnBlur = this.hasAttribute('hide-on-blur')\n    const hideAfter = this.hasAttribute('hide-after')\n    if(hideAfter){\n      const hideAfterTime = Number(this.getAttribute('hide-after') || 10000)\n      this.addEventListener('opened', () => {\n        setTimeout(() => {\n          this.close()\n        }, hideAfterTime)\n      })\n    }\n    if(hideOnBlur){\n      document.addEventListener(\"click\", (e) => {\n        if (!this.contains(e.target)) this.close();\n      });\n    }\n    window.addEventListener('modal:open', (e) => {\n      // console.log(\"modal:open\", e.detail.id, this.id)\n      if(e.detail.id == this.id) this.open();\n    })\n    window.addEventListener('modal:close', (e) => {\n      // console.log(\"modal:close\", e.detail.id, this.id)\n      if(e.detail.id == this.id) this.close();\n    })\n    window.addEventListener('modal:toggle', (e) => {\n      // console.log(\"modal:toggle\", e.detail.id, this.id)\n      if(e.detail.id == this.id) this.toggle();\n    })\n  }\n  get isScrollingEnabled(){\n    return this.getAttribute('scrolling') != \"disabled\"\n  }\n  isOpen() {\n    return this.hasAttribute(\"open\");\n  }\n  open() {\n    this.setAttribute(\"open\", true);\n  }\n  close() {\n    this.removeAttribute(\"open\");\n  }\n  toggle() {\n    console.log(\"toggle\")\n    if (this.isOpen()) {\n      this.close();\n    } else {\n      this.open();\n    }\n  }\n  static get observedAttributes() {\n    return [\"open\"];\n  }\n  attributeChangedCallback(property, oldValue, newValue) {\n    if (oldValue === newValue) return;\n    if (property === \"open\") {\n      if (newValue == \"true\") {\n        console.log(\"open\")\n        if(!this.isScrollingEnabled){\n          window.theme.scroll.disable();\n          console.warn(`[${this.tagName}] Disabled scroll.`);\n        }\n        this.dispatchEvent(new CustomEvent(\"opened\"));\n      } \n      else {\n        console.log(\"close\")\n        if(!this.isScrollingEnabled){\n          window.theme.scroll.enable();\n          console.warn(`[${this.tagName}] Enabled scroll.`);\n        }\n        this.dispatchEvent(new CustomEvent(\"closed\"));\n      }\n      return;\n    } // do not sync open as it is used as a function\n    this[property] = newValue;\n  }\n}\ncustomElements.define(\"theme-modal\", ThemeModal);\n\nclass ThemeAlert extends ThemeModal {\n  constructor() {\n    super();\n  }\n}\ncustomElements.define(\"theme-alert\", ThemeAlert);\n\nwindow.Shopify.theme.alert = (\n  message,\n  options = {\n    button: { label: \"Close\", class: \"btn btn--primary\" },\n    container: { class: \"flex col gap-small spacing-m\" },\n  },\n) => {\n  return new Promise((resolve) => {\n    const alertElement = document.createElement(\"theme-alert\");\n    alertElement.setAttribute(\"scrolling\", \"disabled\");\n    alertElement.setAttribute(\"id\", `alert-${crypto.randomUUID()}`)\n    alertElement.innerHTML = `\n      <div class=\"${options.container.class}\">\n        <p>${message}</p>\n        <theme-modal-button class=\"${options.button.class}\">${options.button.label}</theme-modal-button>\n      </div>\n    `;\n    document.body.appendChild(alertElement);\n    alertElement.addEventListener(\"closed\", () => {\n      alertElement.remove();\n      resolve()\n    });\n    alertElement.open();\n  })\n  \n};\n\nclass ThemeDrawer extends ThemeModal {\n  constructor() {\n    super();\n  }\n}\ncustomElements.define(\"theme-drawer\", ThemeDrawer);\nclass ThemeNotification extends ThemeModal {\n  constructor() {\n    super();\n  }\n}\ncustomElements.define(\"theme-notification\", ThemeNotification);\n"],"names":["window","theme","scroll","lastScrollPosition","scrollEnabled","getScrollbarWidth","scrollDiv","document","createElement","className","body","appendChild","scrollbarWidth","offsetWidth","clientWidth","removeChild","isEnabled","disable","scrollY","style","top","innerWidth","paddingRight","position","enable","scrollTo","behavior","$ae05fdce05933ef6$var$ThemeModalButton","HTMLElement","TAGS","TAG_NAMES","map","tag","toUpperCase","constructor","connectedCallback","addEventListener","e","id","getAttribute","target","getElementById","closest","join","console","log","warn","tagName","includes","toggle","observedAttributes","attributeChangedCallback","property","oldValue","newValue","customElements","define","$ae05fdce05933ef6$var$ThemeModal","hideOnBlur","hasAttribute","hideAfterTime","Number","setTimeout","close","contains","detail","open","isScrollingEnabled","isOpen","setAttribute","removeAttribute","dispatchEvent","CustomEvent","Shopify","alert","message","options","button","label","class","container","Promise","resolve","alertElement","crypto","randomUUID","innerHTML","remove"],"version":3,"file":"theme-modal.js.map"}