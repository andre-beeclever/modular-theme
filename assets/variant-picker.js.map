{"mappings":"C,A,WCAA,MAAM,UAAsB,YAC1B,aAAc,CACZ,KAAK,EACP,CACA,mBAAmB,CAEjB,IAAI,IAAM,KADW,IAAI,CAAC,gBAAgB,CAAC,8BAEzC,EAAY,gBAAgB,CAAC,QAAS,AAAA,IACpC,IAAI,CAAC,UAAU,CAAC,EAAY,KAAK,CACnC,EAEJ,CACA,UAAU,CAAM,CAAE,CAAS,CAAC,CAC1B,IAAM,EAAO,IAAI,CACjB,EAAK,SAAS,CAAC,GAAG,CAAC,WACnB,MAAM,EAAQ,CACZ,YAAa,cACb,QAAS,CAAC,mBAAoB,gBAAgB,EAC9C,OAAQ,KACV,GACC,IAAI,CAAC,AAAA,GAAY,EAAS,IAAI,IAC9B,IAAI,CAAC,AAAA,IACJ,IAAM,EAAW,SAAS,aAAa,CAAC,WACxC,CAAA,EAAS,SAAS,CAAG,EAAK,IAAI,GAC9B,QAAQ,GAAG,CAAC,uBAAwB,EAAS,OAAO,EAGpD,OAAO,aAAa,CAAC,IAAI,YAAY,kBAAmB,CAAC,QAAS,CAAA,EAAM,WAAY,CAAA,EAAO,OAAQ,CAAC,UAAW,CAAS,CAAC,IACzH,EAAK,SAAS,CAAC,MAAM,CAAC,UACxB,GACC,KAAK,CAAC,SAAS,CAAG,EACjB,EAAK,SAAS,CAAC,MAAM,CAAC,WACtB,QAAQ,KAAK,CAAC,EAChB,EACF,CACA,UAAU,CAAS,CAAE,CAAa,CAAC,CACjC,IAAM,EAAS,IAAI,IAAI,SAAS,QAAQ,EACnC,EACH,EAAO,YAAY,CAAC,GAAG,CAAC,UAAW,GAEnC,EAAO,YAAY,CAAC,MAAM,CAAC,WAExB,EACH,EAAO,YAAY,CAAC,GAAG,CAAC,eAAgB,GAExC,EAAO,YAAY,CAAC,MAAM,CAAC,gBAE7B,QAAQ,YAAY,CAAC,KAAM,GAAI,EAAO,IAAI,CAC5C,CACA,WAAW,CAAS,CAAC,CAGnB,IAAM,EAAgB,AADa,AADtB,IAAI,CAAC,OAAO,CAAC,6BACc,aAAa,CAAC,8BACL,KAAK,CACtD,IAAI,CAAC,SAAS,CAAC,EAAW,GAE1B,IAAI,EAAY,IAAI,CAAC,OAAO,CAAC,SAAS,CAClC,GACF,CAAA,EAAY,IAAI,CAAC,OAAO,CAAC,SAAS,cAAc,6BAA6B,KAD/E,EAGA,IAAM,EAAa,IAAI,CAAC,OAAO,CAAC,UAAU,CACpC,EAAS,CAAC,EAAE,EAAW,SAAS,EAAE,EAAU,cAAc,EAAE,EAAc,YAAY,EAAE,EAAU,CAAC,CACzG,IAAI,CAAC,SAAS,CAAC,EAAQ,EACzB,CACF,CACA,eAAe,MAAM,CAAC,iBAAkB,E","sources":["<anon>","src/js/variant-picker.js"],"sourcesContent":["(function () {\nclass $6ed1f67d7e78faa4$var$VariantPicker extends HTMLElement {\n    constructor(){\n        super();\n    }\n    connectedCallback() {\n        const optionValues = this.querySelectorAll(\"input.product-option-value\");\n        for (const optionValue of optionValues)optionValue.addEventListener(\"input\", (event)=>{\n            this.setVariant(optionValue.value);\n        });\n    }\n    updateDOM(newURL, variantId) {\n        const that = this;\n        that.classList.add(\"loading\");\n        fetch(newURL, {\n            credentials: \"same-origin\",\n            headers: {\n                \"X-Requested-With\": \"XMLHttpRequest\"\n            },\n            method: \"GET\"\n        }).then((response)=>response.text()).then((data)=>{\n            const template = document.createElement(\"template\");\n            template.innerHTML = data.trim();\n            console.log(\"handle response TODO\", template.content);\n            // TODO\n            // handle response and update\n            window.dispatchEvent(new CustomEvent(\"variant:changed\", {\n                bubbles: true,\n                cancelable: false,\n                detail: {\n                    variantId: variantId\n                }\n            }));\n            that.classList.remove(\"loading\");\n        }).catch(function(err) {\n            that.classList.remove(\"loading\");\n            console.error(err);\n        });\n    }\n    updateURL(variantId, sellingPlanId) {\n        const newURL = new URL(document.location);\n        if (!!variantId) newURL.searchParams.set(\"variant\", variantId);\n        else newURL.searchParams.delete(\"variant\");\n        if (!!sellingPlanId) newURL.searchParams.set(\"selling_plan\", sellingPlanId);\n        else newURL.searchParams.delete(\"selling_plan\");\n        history.replaceState(null, \"\", newURL.href);\n    }\n    setVariant(variantId) {\n        const form = this.closest(\"form.shopify-product-form\");\n        const current_selling_plan_input = form.querySelector('input[name=\"selling_plan\"]');\n        const sellingPlanId = current_selling_plan_input.value;\n        this.updateURL(variantId, sellingPlanId);\n        let sectionId = this.dataset.sectionId;\n        if (!sectionId) sectionId = this.closest(\"form\")?.querySelector('input[name=\"section-id\"]')?.value;\n        const productUrl = this.dataset.productUrl;\n        const newURL = `${productUrl}?variant=${variantId}&selling_plan=${sellingPlanId}&section_id=${sectionId}`;\n        this.updateDOM(newURL, variantId);\n    }\n}\ncustomElements.define(\"variant-picker\", $6ed1f67d7e78faa4$var$VariantPicker);\n\n})();\n//# sourceMappingURL=variant-picker.js.map\n","class VariantPicker extends HTMLElement {\n  constructor() {\n    super();\n  }\n  connectedCallback(){\n    const optionValues = this.querySelectorAll('input.product-option-value');\n    for(const optionValue of optionValues){\n      optionValue.addEventListener('input', event => {\n        this.setVariant(optionValue.value);\n      });\n    }\n  }\n  updateDOM(newURL, variantId){\n    const that = this;\n    that.classList.add('loading');\n    fetch(newURL, {\n      credentials: 'same-origin',\n      headers: {'X-Requested-With': 'XMLHttpRequest'},\n      method: 'GET'\n    })\n    .then(response => response.text())\n    .then(data => {\n      const template = document.createElement('template');\n      template.innerHTML = data.trim();\n      console.log('handle response TODO', template.content);\n      // TODO\n      // handle response and update\n      window.dispatchEvent(new CustomEvent('variant:changed', {bubbles: true, cancelable: false, detail: {variantId: variantId}}));\n      that.classList.remove('loading');\n    })\n    .catch(function(err) {\n      that.classList.remove('loading');\n      console.error(err);\n    });\n  }\n  updateURL(variantId, sellingPlanId){\n    const newURL = new URL(document.location);\n    if(!!variantId){\n      newURL.searchParams.set('variant', variantId);\n    } else {\n      newURL.searchParams.delete('variant');\n    }\n    if(!!sellingPlanId){\n      newURL.searchParams.set('selling_plan', sellingPlanId);\n    } else {\n      newURL.searchParams.delete('selling_plan');\n    }\n    history.replaceState(null, '', newURL.href);\n  }\n  setVariant(variantId){\n    const form = this.closest('form.shopify-product-form');\n    const current_selling_plan_input = form.querySelector('input[name=\"selling_plan\"]');\n    const sellingPlanId = current_selling_plan_input.value;\n    this.updateURL(variantId, sellingPlanId);\n\n    let sectionId = this.dataset.sectionId;\n    if(!sectionId) {\n      sectionId = this.closest('form')?.querySelector('input[name=\"section-id\"]')?.value;\n    }\n    const productUrl = this.dataset.productUrl;\n    const newURL = `${productUrl}?variant=${variantId}&selling_plan=${sellingPlanId}&section_id=${sectionId}`;\n    this.updateDOM(newURL, variantId);\n  }\n}\ncustomElements.define('variant-picker', VariantPicker);"],"names":["$6ed1f67d7e78faa4$var$VariantPicker","HTMLElement","constructor","connectedCallback","optionValue","querySelectorAll","addEventListener","event","setVariant","value","updateDOM","newURL","variantId","that","classList","add","fetch","credentials","headers","method","then","response","text","data","template","document","createElement","innerHTML","trim","console","log","content","window","dispatchEvent","CustomEvent","bubbles","cancelable","detail","remove","catch","err","error","updateURL","sellingPlanId","URL","location","searchParams","set","delete","history","replaceState","href","current_selling_plan_input","form","closest","querySelector","sectionId","dataset","productUrl","customElements","define"],"version":3,"file":"variant-picker.js.map"}